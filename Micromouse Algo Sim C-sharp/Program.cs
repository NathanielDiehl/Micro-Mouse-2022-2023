using System;

namespace Micromouse_Algo_Sim_C_sharp
{
    /// <summary>
    /// The Program Class
    /// </summary>
    [Author("Taylor Howell (generated by cmd", 1.0)]
    internal class Program
    {
        static void Main(string[] args)
        {
            CommandLineGUI.Tick();

            //Run mapping algorithm
        }

        #region move into the command line gui soon

        /// <summary>
        /// The main menu 
        /// </summary>
        /// <remarks>this stuff should be moved into CommandlineGUI.cs</remarks>
        public void MainMenu()
        {
            Console.WriteLine("--- Main Menu ---");
            Console.WriteLine("Enter what you would like to do");

            string? line = Console.ReadLine();

            switch (line)
            {
                case "Example":

                    break;

                default:

                    break;
            }
        }

        /// <summary>
        /// Run example (GUI Test)
        /// </summary>
        /// <param name="Back">the call back when the user wants to go back to the previous menu</param>
        public void RunExample(Action Back)
        {
            Console.WriteLine("--- Running Example: ---");

            CommandLineGUI.Tick();
            Back();
        }

        /// <summary>
        /// Show an error message
        /// </summary>
        /// <param name="message"></param>
        public void ShowError(string message)
        {
            Console.WriteLine($"Error!\n{message}");
        }

        /// <summary>
        /// Show the command list in a consistent format, and manage general movement between menus
        /// </summary>
        /// <param name="commands">the string array of commands</param>
        [Obsolete("This method is untested", true)]
        public int ShowCommands((string command, string description, Action nextMethod, Action BackAction)[] commands)
        {
            while (true)
            {

                Console.WriteLine();
                Console.WriteLine("Commands: ");

                int i = 0;

                foreach (var x in commands)
                {
                    Console.WriteLine(i + ") " + x.command + "\n\t" + x.description);
                    Console.WriteLine();

                    i++;
                }

                Console.WriteLine((i + 1) + ") Quit \n\tExit the program");

                string? input = Console.ReadLine();

                if (input == null)
                {
                    ShowError("input is null");

                    return ShowCommands(commands);
                }

                input = input.Trim();

                int someCommand = 0;
                if (Int32.TryParse(input, out var result))
                {
                    if (someCommand < commands.Length)
                    {
                        return someCommand;
                    }
                    else if (someCommand == commands.Length)
                    {
                        //quit
                        return -1;
                    }
                }
                else
                {
                    for (int j = 0; j < commands.Length; j++)
                    {
                        if (input == commands[j].command)
                        {
                            return j;
                        }
                    }

                    if (input == "Quit")
                    {
                        //quit
                        return -1;
                    }
                }
            }

            //quit
            return -1;
        }
    }

    #endregion
}
